# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Set environment variables 
env:
  TERM: xterm-256color

window:
  decorations: "none"
  #dimensions:
  #  columns: 0
  #  lines: 0
  #position:
  #  x: 0
  #  y: 0
  padding:
    x: 4
    y: 4
  #dynamic_padding: false
  #decorations: full
  #startup_mode: Windowed
  # Window title
  title: Alacritty
  class:
    instance: Alacritty
    general: Alacritty
  #gtk_theme_variant: None

scrolling:
  history: 5000
  #multiplier: 3
  #auto_scroll: false

tabspaces: 4

draw_bold_text_with_bright_colors: true

# Font configuration
font:
  normal:
    family: FontAwesome
    family: Hack Nerd Font Mono
    style: Regular

  bold:
    family: FontAwesome
    family: Hack Nerd Font Mono
    style: Bold

  italic:
    family: FontAwesome
    family: Hack Nerd Font Mono
    style: Italic

  bold_italic:
    family: FontAwesome
    family: Hack Nerd Font Mono
    style: Bold Italic

  size: 12.0

  offset:
    x: 1
    y: 1

  # enable on macOS + retina
  # #use_thin_strokes: true

colors:
  primary:
    background: '0x1a1b26'
    foreground: '0xa9b1d6'

  # Normal colors
  normal:
    black:   '0x32344a'
    red:     '0xf7768e'
    green:   '0x9ece6a'
    yellow:  '0xe0af68'
    blue:    '0x7aa2f7'
    magenta: '0xad8ee6'
    cyan:    '0x449dab'
    white:   '0x787c99'

  # Bright colors
  bright:
    black:   '0x444b6a'
    red:     '0xff7a93'
    green:   '0xb9f27c'
    yellow:  '0xff9e64'
    blue:    '0x7da6ff'
    magenta: '0xbb9af7'
    cyan:    '0x0db9d7'
    white:   '0xacb0d0'

#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '0xffffff'

# Background opacity
# background_opacity: 1.0
window.opacity: 0.7
#selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  #save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

#cursor:
  # Cursor style: ▇ Block / _ Underline / | Beam
  #style: Block
  #unfocused_hollow: true

# Live config reload (changes require restart)
#live_config_reload: true

# Shell
#shell:
#  program: /bin/bash
#  args:
#    - --login
#working_directory: None

# WinPTY backend (Windows only)
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

  #mouse:
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  #url:
   #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,        mods: Control|Shift, action: Paste            }
  - { key: C,        mods: Control|Shift, action: Copy             }
  - { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }

  - { key: Paste,                    action: Paste                            }
  - { key: Copy,                     action: Copy                             }
  - { key: L,         mods: Control, action: ClearLogNotice                   }
  - { key: L,         mods: Control, chars: "\x0c"                            }
  - { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  - { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }

